package com.user.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.user.entity.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Icons = new Property(1, String.class, "icons", false, "ICONS");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Pwd = new Property(3, String.class, "pwd", false, "PWD");
        public final static Property Question = new Property(4, String.class, "question", false, "QUESTION");
        public final static Property Answer = new Property(5, String.class, "answer", false, "ANSWER");
        public final static Property School = new Property(6, String.class, "school", false, "SCHOOL");
        public final static Property College = new Property(7, String.class, "college", false, "COLLEGE");
        public final static Property Professional = new Property(8, String.class, "professional", false, "PROFESSIONAL");
        public final static Property Clazz = new Property(9, String.class, "clazz", false, "CLAZZ");
        public final static Property Sno = new Property(10, String.class, "sno", false, "SNO");
        public final static Property Sname = new Property(11, String.class, "sname", false, "SNAME");
        public final static Property Ssex = new Property(12, String.class, "ssex", false, "SSEX");
        public final static Property Email = new Property(13, String.class, "email", false, "EMAIL");
        public final static Property Introduce = new Property(14, String.class, "introduce", false, "INTRODUCE");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"ICONS\" TEXT," + // 1: icons
                "\"NAME\" TEXT," + // 2: name
                "\"PWD\" TEXT," + // 3: pwd
                "\"QUESTION\" TEXT," + // 4: question
                "\"ANSWER\" TEXT," + // 5: answer
                "\"SCHOOL\" TEXT," + // 6: school
                "\"COLLEGE\" TEXT," + // 7: college
                "\"PROFESSIONAL\" TEXT," + // 8: professional
                "\"CLAZZ\" TEXT," + // 9: clazz
                "\"SNO\" TEXT," + // 10: sno
                "\"SNAME\" TEXT," + // 11: sname
                "\"SSEX\" TEXT," + // 12: ssex
                "\"EMAIL\" TEXT," + // 13: email
                "\"INTRODUCE\" TEXT);"); // 14: introduce
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String icons = entity.getIcons();
        if (icons != null) {
            stmt.bindString(2, icons);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String pwd = entity.getPwd();
        if (pwd != null) {
            stmt.bindString(4, pwd);
        }
 
        String question = entity.getQuestion();
        if (question != null) {
            stmt.bindString(5, question);
        }
 
        String answer = entity.getAnswer();
        if (answer != null) {
            stmt.bindString(6, answer);
        }
 
        String school = entity.getSchool();
        if (school != null) {
            stmt.bindString(7, school);
        }
 
        String college = entity.getCollege();
        if (college != null) {
            stmt.bindString(8, college);
        }
 
        String professional = entity.getProfessional();
        if (professional != null) {
            stmt.bindString(9, professional);
        }
 
        String clazz = entity.getClazz();
        if (clazz != null) {
            stmt.bindString(10, clazz);
        }
 
        String sno = entity.getSno();
        if (sno != null) {
            stmt.bindString(11, sno);
        }
 
        String sname = entity.getSname();
        if (sname != null) {
            stmt.bindString(12, sname);
        }
 
        String ssex = entity.getSsex();
        if (ssex != null) {
            stmt.bindString(13, ssex);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(14, email);
        }
 
        String introduce = entity.getIntroduce();
        if (introduce != null) {
            stmt.bindString(15, introduce);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String icons = entity.getIcons();
        if (icons != null) {
            stmt.bindString(2, icons);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String pwd = entity.getPwd();
        if (pwd != null) {
            stmt.bindString(4, pwd);
        }
 
        String question = entity.getQuestion();
        if (question != null) {
            stmt.bindString(5, question);
        }
 
        String answer = entity.getAnswer();
        if (answer != null) {
            stmt.bindString(6, answer);
        }
 
        String school = entity.getSchool();
        if (school != null) {
            stmt.bindString(7, school);
        }
 
        String college = entity.getCollege();
        if (college != null) {
            stmt.bindString(8, college);
        }
 
        String professional = entity.getProfessional();
        if (professional != null) {
            stmt.bindString(9, professional);
        }
 
        String clazz = entity.getClazz();
        if (clazz != null) {
            stmt.bindString(10, clazz);
        }
 
        String sno = entity.getSno();
        if (sno != null) {
            stmt.bindString(11, sno);
        }
 
        String sname = entity.getSname();
        if (sname != null) {
            stmt.bindString(12, sname);
        }
 
        String ssex = entity.getSsex();
        if (ssex != null) {
            stmt.bindString(13, ssex);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(14, email);
        }
 
        String introduce = entity.getIntroduce();
        if (introduce != null) {
            stmt.bindString(15, introduce);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // icons
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // pwd
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // question
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // answer
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // school
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // college
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // professional
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // clazz
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // sno
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // sname
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // ssex
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // email
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // introduce
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIcons(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPwd(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setQuestion(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAnswer(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSchool(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCollege(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setProfessional(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setClazz(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setSno(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setSname(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setSsex(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setEmail(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setIntroduce(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
